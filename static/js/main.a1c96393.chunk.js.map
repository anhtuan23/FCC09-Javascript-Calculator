{"version":3,"sources":["Screen.js","Keyboard.js","App.js","serviceWorker.js","index.js","Redux.js"],"names":["Formula","_ref2","formula","react_default","a","createElement","id","Result","_ref3","result","Screen","_ref","Screen_Formula","Screen_Result","buttonArr","text","buttonType","Keyboard","handleClick","map","e","Keyboard_Button","key","proptypes","PropTypes","func","isRequired","Button","returnSymbol","className","onClick","connect","state","Object","objectSpread","dispatch","symbol","pressButton","src_Screen","src_Keyboard","Boolean","window","location","hostname","match","ReactDOM","render","es","store","getStore","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","__webpack_require__","d","__webpack_exports__","redux__WEBPACK_IMPORTED_MODULE_0__","BUTTON_PRESSED","buttonText","type","initialState","reducer","arguments","length","undefined","action","onButtonClick","createStore","lastElement","isOperator","pop","push","isWholeNumber","eval","join","isNumber","string","test","char","includes"],"mappings":"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","file":"static/js/main.a1c96393.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport './App.scss';\r\n\r\nconst Screen = ({ formula, result }) => (\r\n  < div id=\"screen\" >\r\n    <Formula formula={formula} />\r\n    <Result result={result} />\r\n  </div >\r\n)\r\n\r\nScreen.propTypes = {\r\n  formula: PropTypes.array.isRequired,\r\n  result: PropTypes.string.isRequired\r\n}\r\n\r\nconst Formula = ({ formula }) => (\r\n  <div id=\"formula\">\r\n    {formula}\r\n  </div>\r\n)\r\n\r\nFormula.propTypes = { formula: PropTypes.array.isRequired }\r\n\r\nconst Result = ({ result }) => (\r\n  <div id=\"display\">\r\n    {result}\r\n  </div>\r\n)\r\n\r\nResult.propTypes = { result: PropTypes.string.isRequired }\r\n\r\nexport default Screen;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.scss';\r\n\r\nconst buttonArr = [\r\n  { text: \"AC\", buttonType: \"ac-btn\", id: \"clear\" },\r\n  { text: \"=\", buttonType: \"equal-btn\", id: \"equals\" },\r\n  { text: \"0\", buttonType: \"number-btn zero-btn\", id: \"zero\" },\r\n  { text: \"/\", buttonType: \"operator-btn\", id: \"divide\" },\r\n  { text: \"x\", buttonType: \"operator-btn\", id: \"multiply\" },\r\n  { text: \"7\", buttonType: \"number-btn\", id: \"seven\" },\r\n  { text: \"8\", buttonType: \"number-btn\", id: \"eight\" },\r\n  { text: \"9\", buttonType: \"number-btn\", id: \"nine\" },\r\n  { text: \"-\", buttonType: \"operator-btn\", id: \"subtract\" },\r\n  { text: \"4\", buttonType: \"number-btn\", id: \"four\" },\r\n  { text: \"5\", buttonType: \"number-btn\", id: \"five\" },\r\n  { text: \"6\", buttonType: \"number-btn\", id: \"six\" },\r\n  { text: \"+\", buttonType: \"operator-btn\", id: \"add\" },\r\n  { text: \"1\", buttonType: \"number-btn\", id: \"one\" },\r\n  { text: \"2\", buttonType: \"number-btn\", id: \"two\" },\r\n  { text: \"3\", buttonType: \"number-btn\", id: \"three\" },\r\n  { text: \".\", buttonType: \"number-btn\", id: \"decimal\" },\r\n];\r\n\r\nconst Keyboard = ({ handleClick }) => (\r\n  <div id=\"keyboard\">\r\n    {buttonArr.map(e =>\r\n      <Button text={e.text} buttonType={e.buttonType} id={e.id} key={e.id} handleClick={handleClick} />\r\n    )}\r\n  </div>\r\n)\r\n\r\nKeyboard.proptypes = { handleClick: PropTypes.func.isRequired }\r\n\r\nconst Button = ({ text, buttonType, id, handleClick }) => {\r\n  const returnSymbol = text === \"x\" ? \"*\" : text;\r\n  return (\r\n    <div className={'btn ' + buttonType} id={id} onClick={() => handleClick(returnSymbol)}>\r\n      {text}\r\n    </div>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  buttonType: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  handleClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Keyboard;\r\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { pressButton } from \"./Redux\";\nimport './App.scss';\nimport Display from './Screen';\nimport Keyboard from './Keyboard';\n\nconst Calculator = ({ formula, result, handleClick }) => (\n  <div id=\"background\">\n    <div id=\"calculator\">\n      <Display formula={formula} result={result} />\n      <Keyboard handleClick={handleClick} />\n    </div>\n  </div>\n);\n\nconst mapStateToProps = state => ({ ...state });\nconst mapDispatchToProps = dispatch => (\n  {\n    handleClick: symbol => dispatch(pressButton(symbol))\n  }\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Calculator);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { getStore } from './Redux'\n\nReactDOM.render(\n  <Provider store={getStore()}>\n    <Calculator />\n  </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from \"redux\";\r\n\r\nconst BUTTON_PRESSED = 'BUTTON_PRESSED';\r\n\r\nexport const pressButton = (buttonText) => ({ type: BUTTON_PRESSED, buttonText });\r\n\r\nconst initialState = {\r\n  formula: [\" \"],\r\n  result: \"\"\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case BUTTON_PRESSED:\r\n      return onButtonClick(state, action.buttonText);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const getStore = () => createStore(reducer);\r\n\r\nfunction onButtonClick(state, symbol) {\r\n  let formula = state.formula;\r\n  const lastElement = formula[formula.length - 1];\r\n\r\n  if (symbol === \"AC\") {\r\n    formula = [\" \"]\r\n  } else if (isOperator(symbol)) {\r\n    if (isOperator(lastElement)) {//do not allow consecutive operators\r\n      formula.pop();\r\n    }\r\n    if (state.result !== lastElement) {//start a new calculation that operates on the result of the previous evaluation.\r\n      formula = [state.result];//side effect: formula starts with operator will have a preceding 0\r\n    }\r\n    formula.push(symbol);\r\n  } else if (symbol === \".\") {\r\n    if (isOperator(lastElement) || lastElement === \" \") {\r\n      formula.push(\"0.\");\r\n    } else if (isWholeNumber(lastElement)) {\r\n      formula.pop();\r\n      formula.push(lastElement + symbol);\r\n    }\r\n  } else if (isWholeNumber(symbol)) {\r\n    if (isOperator(lastElement) || lastElement === \" \") {\r\n      formula.push(symbol);\r\n    } else if (lastElement === \"0\") {\r\n      formula.pop();\r\n      formula.push(symbol);\r\n    } else {\r\n      formula.pop();\r\n      formula.push(lastElement + symbol);\r\n    }\r\n  } else if (symbol !== \"=\") {\r\n    formula.push(symbol);\r\n  }\r\n\r\n  let result = formula[formula.length - 1];\r\n  if (formula.length === 1 && formula[0] === \" \") {\r\n    result = 0;\r\n  } else if (symbol === \"=\") {\r\n    result = eval(formula.join(\"\"));\r\n  }\r\n\r\n  return { formula, result };\r\n}\r\n\r\nfunction isNumber(string) {\r\n  return /^\\d+\\.?\\d*$/g.test(string);\r\n}\r\n\r\nfunction isWholeNumber(string) {\r\n  return /^\\d+$/g.test(string);\r\n}\r\n\r\nfunction isOperator(char) {\r\n  return \"+-*/\".includes(char)\r\n}"],"sourceRoot":""}